#pragma config(Sensor, S1,     rightLightSensor,    sensorCOLORGREEN)
#pragma config(Sensor, S2,     rightTouchSensor,    sensorTouch)
#pragma config(Sensor, S3,     leftTouchSensor,     sensorTouch)
#pragma config(Sensor, S4,     leftLightSensor,     sensorCOLORGREEN)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

void pidSetup();
void doNothing();

int power = 10;
float rotationsForCm = 28.14; //number of rotations required for a cm
float rotationsFordeg = 3.48; //number of rotations required to turn for a degree

const tSensors rightLightSensor = (tSensors) S1;
const tSensors leftLightSensor = (tSensors) S4;

bool lightFound = false;

task checkLightSource(){
    while(true){
      lightFound = ((SensorValue(rightLightSensor) > 20 || 
                     SensorValue(rightLightSensor) > 20) && 
                     abs(SensorValue(rightLightSensor) - 
                         SensorValue(leftLightSensor)) < 10);
    }
}

task findLightSource(){
    if((SensorValue(rightLightSensor) > 20 || 
        SensorValue(rightLightSensor) > 20) &&
        SensorValue(rightLightSensor) > SensorValue(leftLightSensor)){
      motor[motorA] = -power;
      motor[motorC] = power;
    } else if((SensorValue(rightLightSensor) > 20 || 
        SensorValue(rightLightSensor) > 20) &&
        SensorValue(rightLightSensor) < SensorValue(leftLightSensor)) {
      motor[motorA] = power;
      motor[motorC] = -power;
    } else {
      motor[motorA] = power;
      motor[motorC] = -power;
    }
}

task main() {
    pidSetup();
    StartTask(checkLightSource);
    while(true){
      if(!lightFound){ 
        StartTask(findLightSource);
      } else {
        StopTask(findLightSource);
        doNothing();
      }
    }
}

void doNothing(){
    motor[motorA] = 0;
    motor[motorC] = 0;
}

void pidSetup() {
    nMotorPIDSpeedCtrl[motorA] = mtrSpeedReg;
    nMotorPIDSpeedCtrl[motorC] = mtrSpeedReg;
}
